/*
 * Copyright (c) 2010-2011 Stefan Bolte <portix@gmx.net>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

static KeyValue KEYS[] = {
  { "add_view",                 {   "ga",         0,                  },  },  
  { "allow_cookie",             {   "CC",         0,                   },  },  
  { "bookmark",                 {   "M",         0,                   },  },  
  { "bookmarks",                {   "gb",        0,                   },  },  
  { "bookmarks_nv",             {   "gB",        0,                   },  },  
  { "bookmarks_nw",             {   "wB",        0,                   },  },  
  { "command_mode",             {   ":",         0,                   },  },  
  { "only",                     {   "co",         0,                   },  },  
  { "find_forward",             {   "/",         0,                   },  }, 
  { "find_next",                {   "n",         0,                   },  },
  { "find_previous",            {   "N",         0,                   },  },
  { "find_backward",            {   "?",         0,                   },  },  
  { "focus_next",               {   "J",         0,                   },  },  
  { "focus_prev",               {   "K",         0,                   },  },  
  { "focus_nth_view",           {   "T",         0,                   },  },  
  { "hint_mode",                {   "f",         0,                   },  },  
  { "hint_mode_links",          {   ";;",         0,                   },  },  
  { "hint_mode_images",         {   ";i",         0,                   },  },  
  { "hint_mode_images_nv",      {   ";I",         0,                   },  },  
  { "hint_mode_editable",       {   ";e",         0,                   },  },  
  { "hint_mode_url",            {   ";o",         0,                   },  },  
  { "hint_mode_url_nv",         {   ";O",         0,                   },  },  
  { "hint_mode_download",       {   ";d",           0 }, },
  { "hint_mode_nv",             {   "F",         0,                   },  },  
  { "hint_mode_nw",             {   "wf",         0,                   },  },  
  { "hint_mode_clipboard",      {   ";y",         0,                   },  },  
  { "hint_mode_primary",        {   ";Y",         0,                   },  },  
  { "history_back",             {   "H",         0,                   },  },  
  { "history_forward",          {   "L",         0,                   },  },  
  { "history_back_nv",             {   "th",         0,                   },  },  
  { "history_forward_nv",          {   "tl",         0,                   },  },  
  { "history_back_nw",             {   "wh",         0,                   },  },  
  { "history_forward_nw",          {   "wl",         0,                   },  },  
  { "insert_mode",              {   "i",         0,                   },  },  
  { "open",                     {   "o",         0,                   },  },  
  { "Open",                     {   "go",        0,                   },  }, 
  { "open_nv",                  {   "O",         0,                   },  },  
  { "Open_nv",                  {   "gO",         0,                   },  },  
  { "open_nw",                  {   "wo",         0,                   },  },  
  { "Open_nw",                  {   "wO",         0,                   },  },  
  { "open_start_page",          {   "h",         GDK_CONTROL_MASK,    },  },  
  { "open_quickmark",           {   "b",         0,                   },  },  
  { "open_quickmark_nv",        {   "B",         0,                   },  },  
  { "open_quickmark_nw",        {   "wb",        0,                   },  },  
  { "reload",                   {   "r",         0,                   },  },  
  { "reload_bypass_cache",      {   "R",         0,                   },  },  
  { "remove_view",              {   "d",         0,                   },  },  
  { "save_quickmark",           {   "m",         0,                   },  },  
  { "scroll_bottom",            {   "G",         0,                   },  },  
  { "scroll_down",              {   "j",         0,                   },  },  
  { "scroll_left",              {   "h",         0,                   },  },  
  { "scroll_halfpage_down",     {   "d",         GDK_CONTROL_MASK,    },  },  
  { "scroll_halfpage_up",       {   "u",         GDK_CONTROL_MASK,    },  },  
  { "scroll_page_down",         {   "f",         GDK_CONTROL_MASK,    },  },  
  { "scroll_page_up",           {   "b",         GDK_CONTROL_MASK,    },  },  
  { "scroll_right",             {   "l",         0,                   },  },  
  { "scroll_top",               {   "gg",         0,                  },  },  
  { "scroll_up",                {   "k",         0,                   },  },  
  { "show_keys",                {   "Sk",         0,                  },  },  
  { "show_settings",            {   "Ss",        0,                  },  },  
  { "stop_loading",             {   "s",         GDK_CONTROL_MASK,   },  },  
  { "toggle_bottomstack",       {   "tb",         0,  },  },  
  { "view_source",              {   "gf",         0,                  },  },  
  { "zoom_in",                  {   "+",         0,                  },  },  
  { "zoom_normal",              {   "=",         0,                  },  },  
  { "zoom_out",                 {   "-",         0,                  },  },  
  { "save_search_field",        {   "gs",         0,                  },  },  
  { "autoload_images",          {   NULL,           0,                  },  },
  { "autoresize_window",        {   NULL,           0,                  },  },
  { "autoshrink_images",        {   NULL,           0,                  },  },
  { "caret_browsing",           {   NULL,           0,                  },  },
  { "java_applets",             {   NULL,           0,                  },  },
  { "plugins",                  {   NULL,           0,                  },  },
  { "private_browsing",         {   NULL,           0,                  },  },
  { "scripts",                  {   NULL,           0,                  },  },
  { "spell_checking",           {   NULL,           0,                  },  },
  { "reload_scripts",           {   NULL,           0,                  },  },
  { "proxy",                    {   "p" ,           GDK_CONTROL_MASK,  },  },
  { "focus_input",              {   "gi",           0, }, }, 
  { "set_setting",              {   "ss",           0, }, }, 
  { "set_global_setting",       {   "sgs",           0, }, }, 
  { "set_key",                  {   "sk",           0, }, }, 
  { "yank",                     {   "yy",           0, }, }, 
  { "yank_primary",             {   "yY",           0, }, }, 
  { "yank_title",               {   "yt",           0, }, }, 
  { "yank_title_primary",       {   "yT",           0, }, }, 
  { "paste",                    {   "pp",           0, }, }, 
  { "paste_primary",            {   "pP",           0, }, }, 
  { "paste_nv",                 {   "Pp",           0, }, }, 
  { "paste_primary_nv",         {   "PP",           0, }, }, 
  { "paste_nw",                 {   "wp",           0, }, }, 
  { "paste_primary_nw",         {   "wP",           0, }, }, 
  /* entry  shortcuts */
  { "entry_delete_word",        {   "w",            GDK_CONTROL_MASK, }, }, 
  { "entry_delete_letter",      {   "h",            GDK_CONTROL_MASK, }, }, 
  { "entry_delete_line",        {   "u",            GDK_CONTROL_MASK, }, }, 
  { "entry_word_forward",       {   "f",            GDK_CONTROL_MASK, }, }, 
  { "entry_word_back",          {   "b",            GDK_CONTROL_MASK, }, }, 
  { "entry_history_forward",    {   "j",            GDK_CONTROL_MASK, }, }, 
  { "entry_history_back",       {   "k",            GDK_CONTROL_MASK, }, }, 
  { "download_set_execute",     {   "x",            GDK_CONTROL_MASK, }, }, 
  { "complete_history",         {   "H",         GDK_CONTROL_MASK,     },  },  
  { "complete_bookmarks",       {   "B",         GDK_CONTROL_MASK,     },  },  
  { "complete_commands",        {   "I",         GDK_CONTROL_MASK,     },  },  
  { "complete_searchengines",   {   "S",         GDK_CONTROL_MASK,     },  },  
  { "complete_userscript",      {   "U",         GDK_CONTROL_MASK,     },  },  
  { "complete_current_history", {   "C",         GDK_CONTROL_MASK,     },  },  
  { "buffers",                  {   "gt",         0 } }, 

  { "web_inspector",            {   "wi",         0,     },  },  

  { "save_session",             {   "ZZ",           0 }, }, 
  { "save_named_session",       {   "gZZ",           0 }, }, 
  { "toggle_scripts_uri",       {   "tsu",           0 }, }, 
  { "toggle_scripts_host",      {   "tsh",           0 }, }, 
  { "toggle_scripts_uri_tmp",   {   "ttu",           0 }, }, 
  { "toggle_scripts_host_tmp",  {   "tth",           0 }, }, 
  { "toggle_plugins_uri",       {   "pu",           0 }, }, 
  { "toggle_plugins_host",      {   "ph",           0 }, }, 
  { "toggle_plugins_uri_tmp",   {   "ptu",           0 }, }, 
  { "toggle_plugins_host_tmp",  {   "pth",           0 }, }, 
  { "toggle_adblocker",         {   "ta",           0 }, }, 
  { "new_view",                 {   "V",            0 }, }, 
  { "new_window",               {   "W",            0 }, }, 
  { "save",                     {   "sf",            0 }, }, 
  { "undo",                     {   "u",            0 }, }, 
  { "execute_userscript",       {   "eu",           0 }, },  
  { "print",                    {   "p",            GDK_CONTROL_MASK | GDK_MOD1_MASK }, }, 
  { "load_html",                    {   NULL,         0 }, }, 
  { "load_html_nv",                    {   NULL,         0 }, }, 
  { "toggle_hidden_files",          {   "g.",         0 }, }, 
  { "complete_path",          {   "p",         GDK_CONTROL_MASK }, }, 
  { "quit",                   {   "q",         GDK_CONTROL_MASK }, }, 
  { "fullscreen",             {   "F11",         GDK_CONTROL_MASK }, }, 
  { "pass_through",           {   "i",        GDK_CONTROL_MASK }, }, 
  { "open_editor",            {   "e",        GDK_CONTROL_MASK }, }, 
  { "toggle_bars",            {   "xx",        0 }, }, 
  { "toggle_topbar",            {   "xt",        0 }, }, 
  { "toggle_bottombar",            {   "xb",        0 }, }, 
  { "presentation_mode",            {   "F12",        GDK_CONTROL_MASK }, }, 
  { "protect",                {   "P",        GDK_CONTROL_MASK }, }, 
  { "lock_uri",                {   "xu",        0 }, }, 
  { "lock_domain",                {   "xd",        0 }, }, 
  { "back_new_tab",                {   "xb",        0 }, }, 
};

/* FUNCTION_MAP{{{*/
static FunctionMap FMAP [] = {
  { { "add_view",              "Add a new view",                    }, 1, 
    (Func)commands_add_view,            NULL,                              ALWAYS_SM,     { .p = NULL }, },
  { { "toggle_bars",    "Toggle visibility of status and tabbar" },                 1, 
    (Func) commands_toggle_bars,                                     NULL,     ALWAYS_SM,    { .n = BAR_VIS_STATUS | BAR_VIS_TOP  } }, 
  { { "toggle_topbar",    "Toggle visibility of tabbar" },                 1, 
    (Func) commands_toggle_bars,                                     NULL,     ALWAYS_SM,    { .n = BAR_VIS_TOP  } }, 
  { { "toggle_bottombar",    "Toggle visibility of statusbar" },                 1, 
    (Func) commands_toggle_bars,                                     NULL,     ALWAYS_SM,    { .n = BAR_VIS_STATUS } }, 
  { { "presentation_mode",    "Toggle presentation mode" },                 1, 
    (Func) commands_presentation_mode,                                     NULL,     ALWAYS_SM,    { .n = BAR_VIS_STATUS | BAR_VIS_TOP  } }, 
  { { "protect",    "Protect/unprotect this tab" },                 1, 
    (Func) commands_toggle_lock_protect,                                   NULL,     ALWAYS_SM,    { .n = LP_PROTECT } }, 
  { { "lock_domain",    "Lock/unlock domain for this tab" },                 1, 
    (Func) commands_toggle_lock_protect,                                   NULL,     ALWAYS_SM,    { .n = LP_LOCK_DOMAIN  } }, 
  { { "lock_uri",    "Lock/unlock uri for this tab" },                 1, 
    (Func) commands_toggle_lock_protect,                                   NULL,     ALWAYS_SM,    { .n = LP_LOCK_URI  } }, 
  { { "allow_cookie",          "Cookie allowed",                    }, 1, 
    (Func)commands_allow_cookie,        "No new domain in current context",    POST_SM, },
  { { "bookmark",              "Bookmark current page",             }, 1, 
    (Func)commands_bookmark,            NO_URL,                            POST_SM, },
  { { "bookmarks",             "Bookmarks",                         }, 0,
    (Func)commands_bookmarks,           "No Bookmarks",                    NEVER_SM,     { .n = OPEN_NORMAL }, }, 
  { { "bookmarks_nv",          "Bookmarks new tab",                }, 0,
    (Func)commands_bookmarks,           "No Bookmarks",                    NEVER_SM,     { .n = OPEN_NEW_VIEW }, },
  { { "bookmarks_nw",          "Bookmarks new window",              }, 0, 
    (Func)commands_bookmarks,           "No Bookmarks",                    NEVER_SM,     { .n = OPEN_NEW_WINDOW}, }, 
  { { "new_view",              "New view for next navigation",      }, 0, 
    (Func)commands_new_window_or_view,  NULL,                              NEVER_SM,     { .n = OPEN_NEW_VIEW }, }, 
  { { "new_window",            "New window for next navigation",    }, 0, 
    (Func)commands_new_window_or_view,  NULL,                              NEVER_SM,     { .n = OPEN_NEW_WINDOW }, }, 
  { { "command_mode",          "Enter command mode",                }, 0, 
    (Func)commands_command_mode,            NULL,                              POST_SM, },
  { { "find_backward",         "Find backward ",                    }, CP_COMMANDLINE|CP_HAS_MODE, 
    (Func)commands_find,                NO_URL,                            NEVER_SM,     { .b = false }, },
  { { "find_forward",          "Find forward ",                     }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_find,                NO_URL,                            NEVER_SM,     { .b = true }, },
  { { "find_next",             "Find next",                         }, 1, 
    (Func)commands_search,                  "No matches",                      ALWAYS_SM,     { .b = true }, },
  { { "find_previous",         "Find previous",                     }, 1, 
    (Func)commands_search,                  "No matches",                      ALWAYS_SM,     { .b = false }, },
  { { "focus_input",           "Focus input",                       }, 1, 
    (Func)commands_focus_input,        "No input found in current context",      ALWAYS_SM, },
  { { "focus_next",            "Focus next view",                   }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_focus,              "No other view",                   ALWAYS_SM,  { .n = 1 } },
  { { "focus_prev",            "Focus previous view",               }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_focus,              "No other view",                   ALWAYS_SM,  { .n = -1 } },
  { { "focus_nth_view",        "Focus nth view",                    }, 0, 
    (Func)commands_focus_nth_view,       "No such view",                   ALWAYS_SM,  { 0 } },
  { { "hint_mode",             "Follow hints",                      }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_show_hints,          NO_HINTS,                          NEVER_SM,    { .n = OPEN_NORMAL, .i = HINT_T_ALL }, },
  { { "hint_mode_links",       "Follow links",                      }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_show_hints,          "No links",                          NEVER_SM,    { .n = OPEN_NORMAL, .i = HINT_T_LINKS }, },
  { { "hint_mode_images",       "Follow images",                      }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_show_hints,          "No images",                          NEVER_SM,    { .n = OPEN_NORMAL, .i = HINT_T_IMAGES }, },
  { { "hint_mode_images_nv",       "Follow images in new tab",                      }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_show_hints,          "No images",                          NEVER_SM,    { .n = OPEN_NEW_VIEW, .i = HINT_T_IMAGES }, },
  { { "hint_mode_editable",       "Follow editable",                      }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_show_hints,          "No editable elements",           NEVER_SM,    { .n = OPEN_NORMAL, .i = HINT_T_EDITABLE }, },
  { { "hint_mode_url",            "hintopen",                      }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_show_hints,          NO_HINTS,           NEVER_SM,    { .n = OPEN_NORMAL, .i = HINT_T_URL }, },
  { { "hint_mode_url_nv",         "hinttabopen",                      }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_show_hints,          NO_HINTS,           NEVER_SM,    { .n = OPEN_NEW_VIEW, .i = HINT_T_URL }, },
  { { "hint_mode_nv",          "Follow hints in new tab",           }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_show_hints,          NO_HINTS,                          NEVER_SM,    { .n = OPEN_NEW_VIEW, .i = HINT_T_ALL }, },
  { { "hint_mode_nw",          "Follow hints in new window",         }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_show_hints,          NO_HINTS,                          NEVER_SM,    { .n = OPEN_NEW_WINDOW, .i = HINT_T_ALL }, },
  { { "hint_mode_clipboard",          "Copy to clipboard",         }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_show_hints,          NO_HINTS,                          NEVER_SM,    { .n = OPEN_NORMAL, .i = HINT_T_CLIPBOARD }, },
  { { "hint_mode_primary",          "Copy to primary",         }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_show_hints,          NO_HINTS,                          NEVER_SM,    { .n = OPEN_NORMAL, .i = HINT_T_PRIMARY }, },
  { { "hint_mode_download",         "Download",                          }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_show_hints,          NO_HINTS,                          NEVER_SM,    { .n = OPEN_DOWNLOAD }, },
  { { "history_back",          "Go Back",                           }, 1, 
    (Func)commands_history,        "Beginning of History",            ALWAYS_SM, { .n = OPEN_NORMAL, .i = -1 } },
  { { "history_forward",       "Go Forward",                        }, 1, 
    (Func)commands_history,     "End of History",                  ALWAYS_SM, { .n = OPEN_NORMAL, .i = 1 } },
  { { "history_back_nv",          "Go Back",                           }, 1, 
    (Func)commands_history,        "Beginning of History",            ALWAYS_SM, { .n = OPEN_NEW_VIEW, .i = -1 } },
  { { "history_forward_nv",       "Go Forward",                        }, 1, 
    (Func)commands_history,     "End of History",                  ALWAYS_SM, { .n = OPEN_NEW_VIEW, .i = 1 } },
  { { "history_back_nw",          "Go Back",                           }, 1, 
    (Func)commands_history,        "Beginning of History",            ALWAYS_SM, { .n = OPEN_NEW_WINDOW, .i = -1 } },
  { { "history_forward_nw",       "Go Forward",                        }, 1, 
    (Func)commands_history,     "End of History",                  ALWAYS_SM, { .n = OPEN_NEW_WINDOW, .i = 1 } },
  { { "insert_mode",           "Insert Mode",                       }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_insert_mode,             NULL,                              POST_SM, },
  { { "load_html",             "Load html",                         }, 1, 
    (Func)commands_open,           NULL,                       NEVER_SM,   { .i = HTML_STRING, .n = OPEN_NORMAL,      .p = NULL } },
  { { "load_html_nv",          "Load html new view",                }, 1, 
    (Func)commands_open,           NULL,                       NEVER_SM,   { .i = HTML_STRING, .n = OPEN_NEW_VIEW,    .p = NULL } },
  { { "open",                  "open",                              }, 1, 
    (Func)commands_open,                NULL,                 NEVER_SM,   { .n = OPEN_NORMAL,      .p = NULL } },
  { { "Open",                  "open",                              }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_open,                NULL,                 NEVER_SM,   { .n = OPEN_NORMAL | SET_URL, .p = NULL } },
  { { "open_nv",               "tabopen",                          }, 1, 
    (Func)commands_open,                NULL,                 NEVER_SM,   { .n = OPEN_NEW_VIEW,     .p = NULL } },
  { { "Open_nv",               "tabopen",                          }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_open,                NULL,                 NEVER_SM,   { .n = OPEN_NEW_VIEW | SET_URL, .p = NULL } },
  { { "open_nw",               "winopen",                           }, 1, 
    (Func)commands_open,                NULL,                 NEVER_SM,   { .n = OPEN_NEW_WINDOW,     .p = NULL } },
  { { "Open_nw",               "winopen",                           }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_open,                NULL,                 NEVER_SM,   { .n = OPEN_NEW_WINDOW | SET_URL,     .p = NULL } },
  { { "open_quickmark",        "Open quickmark",                         }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_quickmark,           NO_URL,                            NEVER_SM,   { .n = QUICK_MARK_OPEN, .i=OPEN_NORMAL }, },
  { { "open_quickmark_nv",     "Open quickmark in a new tab",                }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_quickmark,           NULL,                              NEVER_SM,    { .n = QUICK_MARK_OPEN, .i=OPEN_NEW_VIEW }, },
  { { "open_quickmark_nw",     "Open quickmark in a new window",              }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_quickmark,           NULL,                              NEVER_SM,    { .n = QUICK_MARK_OPEN, .i=OPEN_NEW_WINDOW }, },
  { { "open_start_page",       "Open startpage",                    }, 1, 
    (Func)commands_open_startpage,      "No startpage set",                ALWAYS_SM, },
  { { "quit",           "Quit dwb",               }, 1, 
    (Func)commands_quit,         NULL,                   ALWAYS_SM, },
  { { "reload",                "Reload current page",                            }, 1, 
    (Func)commands_reload,              NULL,                              ALWAYS_SM, },
  { { "reload_bypass_cache",   "Reload current page without using any cached data",  }, 1, 
    (Func)commands_reload_bypass_cache,       NULL,                              ALWAYS_SM, },
  { { "stop_loading",   "Stop loading current page",  }, 1, 
    (Func)commands_stop_loading,       NULL,                              ALWAYS_SM, },
  { { "remove_view",           "Close view",                        }, 1, 
    (Func)commands_remove_view,         NULL,                              ALWAYS_SM, },
  { { "only",           "Close other tabs except for current",                        }, 1, 
    (Func)commands_only,         "No other view",                              ALWAYS_SM, },
  { { "save_quickmark",        "Save quickmark",    }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_quickmark,           NO_URL,                            NEVER_SM,    { .n = QUICK_MARK_SAVE }, },
  { { "save_search_field",     "Add a new searchengine",            }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_add_search_field,    "No input in current context",     POST_SM, },
  { { "scroll_bottom",         "Scroll to  bottom of the page",     }, 1, 
    (Func)commands_scroll,              NULL,                              ALWAYS_SM,    { .n = SCROLL_BOTTOM }, },
  { { "scroll_down",           "Scroll down",                       }, 1, 
    (Func)commands_scroll,              "Bottom of the page",              ALWAYS_SM,    { .n = SCROLL_DOWN, }, },
  { { "scroll_left",           "Scroll left",                       }, 1, 
    (Func)commands_scroll,              "Left side of the page",           ALWAYS_SM,    { .n = SCROLL_LEFT }, },
  { { "scroll_halfpage_down",  "Scroll one-half page down",         }, 1, 
    (Func)commands_scroll,              "Bottom of the page",              ALWAYS_SM,    { .n = SCROLL_HALF_PAGE_DOWN, }, },
  { { "scroll_halfpage_up",    "Scroll one-half page up",           }, 1, 
    (Func)commands_scroll,              "Top of the page",                 ALWAYS_SM,    { .n = SCROLL_HALF_PAGE_UP, }, },
  { { "scroll_page_down",      "Scroll one page down",              }, 1, 
    (Func)commands_scroll,              "Bottom of the page",              ALWAYS_SM,    { .n = SCROLL_PAGE_DOWN, }, },
  { { "scroll_page_up",        "Scroll one page up",                }, 1, 
    (Func)commands_scroll,              "Top of the page",                 ALWAYS_SM,    { .n = SCROLL_PAGE_UP, }, },
  { { "scroll_right",          "Scroll left",                       }, 1, 
    (Func)commands_scroll,              "Right side of the page",          ALWAYS_SM,    { .n = SCROLL_RIGHT }, },
  { { "scroll_top",            "Scroll to the top of the page",     }, 1, 
    (Func)commands_scroll,              NULL,                              ALWAYS_SM,    { .n = SCROLL_TOP }, },
  { { "scroll_up",             "Scroll up",                         }, 1, 
    (Func)commands_scroll,              "Top of the page",                 ALWAYS_SM,    { .n = SCROLL_UP, }, },
  { { "set_setting",    "Set setting",               }, 0, 
    (Func)commands_set_setting,         NULL,                              NEVER_SM,    },
  { { "set_key",               "Set keybinding",                    }, CP_COMMANDLINE | CP_HAS_MODE, 
    (Func)commands_set_key,             NULL,                              NEVER_SM,    { 0 } },
  { { "show_keys",             "Key configuration",                 }, 1, 
    (Func)commands_show_keys,           NULL,                              ALWAYS_SM, },
  { { "show_settings",         "Settings configuration",                          }, 1, 
    (Func)commands_show_settings,       NULL,                              ALWAYS_SM,    },
  { { "view_source",           "View source",                       }, 1, 
    (Func)commands_view_source,         NULL,                              ALWAYS_SM, },
  { { "zoom_in",               "Zoom in",                           }, 1, 
    (Func)commands_zoom_in,             "Cannot zoom in further",          ALWAYS_SM, },
  { { "zoom_normal",           "Zoom to 100%",                         }, 1, 
    (Func)commands_set_zoom_level,      NULL,                              ALWAYS_SM,    { .d = 1.0,   .p = NULL } },
  { { "zoom_out",              "Zoom out",                          }, 1, 
    (Func)commands_zoom_out,            "Cannot zoom out further",         ALWAYS_SM, },
  /* yank and paste */
  { { "yank",                  "Yank current url",                              }, 1, 
    (Func)commands_yank,                 NO_URL,                 POST_SM,  { .p = GDK_NONE, .n = CA_URI } },
  { { "yank_primary",          "Yank current url to Primary selection",         }, 1, 
    (Func)commands_yank,                 NO_URL,                 POST_SM,  { .p = GDK_SELECTION_PRIMARY, .n = CA_URI } },
  { { "yank_title",                  "Yank current title",                              }, 1, 
    (Func)commands_yank,                 "No title",                 POST_SM,  { .p = GDK_NONE, .n = CA_TITLE } },
  { { "yank_title_primary",          "Yank current title to Primary selection",         }, 1, 
    (Func)commands_yank,                 "No title",                 POST_SM,  { .p = GDK_SELECTION_PRIMARY, .n = CA_TITLE } },
  { { "paste",                 "Open url from clipboard",                             }, 1, 
    (Func)commands_paste,               "Clipboard is empty",    ALWAYS_SM, { .n = OPEN_NORMAL, .p = GDK_NONE } },
  { { "paste_primary",         "Open url from primary selection",           }, 1, 
    (Func)commands_paste,               "No primary selection",  ALWAYS_SM, { .n = OPEN_NORMAL, .p = GDK_SELECTION_PRIMARY } },
  { { "paste_nv",              "Open url from clipboard in a new tab",                   }, 1, 
    (Func)commands_paste,               "Clipboard is empty",    ALWAYS_SM, { .n = OPEN_NEW_VIEW, .p = GDK_NONE } },
  { { "paste_primary_nv",      "Open url from primary selection in a new window", }, 1, 
    (Func)commands_paste,               "No primary selection",  ALWAYS_SM, { .n = OPEN_NEW_VIEW, .p = GDK_SELECTION_PRIMARY } },
  { { "paste_nw",              "Open url from clipboard in a new window",                   }, 1, 
    (Func)commands_paste,             "Clipboard is empty",    ALWAYS_SM, { .n = OPEN_NEW_WINDOW, .p = GDK_NONE } },
  { { "paste_primary_nw",      "Open url from primary selection in a new window", }, 1, 
    (Func)commands_paste,             "No primary selection",  ALWAYS_SM, { .n = OPEN_NEW_WINDOW, .p = GDK_SELECTION_PRIMARY } },

  { { "save_session",          "Save current session", },              1, 
    (Func)commands_save_session,        NULL,                              ALWAYS_SM,  { .n = NORMAL_MODE } },
  { { "save_named_session",    "Save current session with name", },    CP_COMMANDLINE|CP_HAS_MODE, 
    (Func)commands_save_session,        NULL,                              POST_SM,  { .n = SAVE_SESSION } },
  { { "save",                  "Save all configuration files", },      1, 
    (Func)commands_save_files,        NULL,                              POST_SM,  { .n = SAVE_SESSION } },
  { { "undo",                  "Undo closing last tab", },             1, 
    (Func)commands_undo,              "No more closed views",                              POST_SM },
  { { "web_inspector",         "Open the webinspector", },             1, 
    (Func)commands_web_inspector,              "Enable developer extras for the webinspector",                              POST_SM },
  { { "reload_scripts",         "Reload scripts", },             1, 
    (Func)commands_reload_scripts,              NULL,                              ALWAYS_SM },

  /* Entry editing */
  { { "entry_delete_word",      "Command line: Delete word in", },                      0,  
    (Func)commands_entry_delete_word,            NULL,        ALWAYS_SM,  { 0 }, true, }, 
  { { "entry_delete_letter",    "Command line: Delete a single letter", },           0,  
    (Func)commands_entry_delete_letter,          NULL,        ALWAYS_SM,  { 0 }, true, }, 
  { { "entry_delete_line",      "Command line: Delete to beginning of the line", },  0,  
    (Func)commands_entry_delete_line,            NULL,        ALWAYS_SM,  { 0 }, true, }, 
  { { "entry_word_forward",     "Command line: Move cursor forward on word", },      0,  
    (Func)commands_entry_word_forward,           NULL,        ALWAYS_SM,  { 0 }, true, }, 
  { { "entry_word_back",        "Command line: Move cursor back on word", },         0,  
    (Func)commands_entry_word_back,              NULL,        ALWAYS_SM,  { 0 }, true, }, 
  { { "entry_history_back",     "Command line: Command history back", },             0,  
    (Func)commands_entry_history_back,           NULL,        ALWAYS_SM,  { 0 }, true, }, 
  { { "entry_history_forward",  "Command line: Command history forward", },          0,  
    (Func)commands_entry_history_forward,        NULL,        ALWAYS_SM,  { 0 }, true, }, 
  { { "download_set_execute",   "Downloads: toggle between spawning application/download path", }, 0, 
    (Func)download_set_execute,        NULL,       ALWAYS_SM,  { 0 }, true, }, 
  { { "complete_history",       "Complete browsing history", },       0, 
    (Func)commands_complete_type,             NULL,     ALWAYS_SM,     { .n = COMP_HISTORY }, true, }, 
  { { "complete_bookmarks",     "Complete bookmarks", },              0, 
    (Func)commands_complete_type,             NULL,     ALWAYS_SM,     { .n = COMP_BOOKMARK }, true, }, 
  { { "complete_commands",      "Complete command history", },        0, 
    (Func)commands_complete_type,             NULL,     ALWAYS_SM,     { .n = COMP_INPUT }, true, }, 
  { { "complete_searchengines", "Complete searchengines", },          0, 
    (Func)commands_complete_type,             NULL,     ALWAYS_SM,     { .n = COMP_SEARCH }, true, }, 
  { { "complete_userscript",    "Complete userscripts", },            0, 
    (Func)commands_complete_type,             NULL,     ALWAYS_SM,     { .n = COMP_USERSCRIPT }, true, }, 
  { { "complete_path",          "Complete local file path", },        0, 
    (Func)commands_complete_type,             NULL,     ALWAYS_SM,     { .n = COMP_PATH }, true, }, 
  { { "complete_current_history",          "Complete history of current tab", },        0, 
    (Func)commands_complete_type,             NULL,     ALWAYS_SM,     { .n = COMP_CUR_HISTORY }, true, }, 
  { { "buffers",                          "Buffer", },        CP_COMMANDLINE | CP_HAS_MODE,
    (Func)commands_complete_type,            "Only one buffer",     NEVER_SM,     { .n = COMP_BUFFER }, }, 

  { { "spell_checking",        "Setting: spell checking",         },   0, 
    (Func)commands_toggle_property,     NULL,                              POST_SM,    { .p = "enable-spell-checking" } },
  { { "scripts",               "Setting: scripts",                },   1, 
    (Func)commands_toggle_property,     NULL,                              POST_SM,    { .p = "enable-scripts" } },
  { { "auto_shrink_images",    "Toggle autoshrink images",        },   0, 
    (Func)commands_toggle_property,     NULL,                    POST_SM,    { .p = "auto-shrink-images" } },
  { { "autoload_images",       "Toggle autoload images",          },   0, 
    (Func)commands_toggle_property,     NULL,                    POST_SM,    { .p = "auto-load-images" } },
  { { "autoresize_window",     "Toggle autoresize window",        },   0, 
    (Func)commands_toggle_property,     NULL,                    POST_SM,    { .p = "auto-resize-window" } },
  { { "caret_browsing",        "Toggle caret browsing",           },   0, 
    (Func)commands_toggle_property,     NULL,                    POST_SM,    { .p = "enable-caret-browsing" } },
  { { "default_context_menu",  "Toggle enable default context menu",           }, 0, 
    (Func)commands_toggle_property,     NULL,       POST_SM,    { .p = "enable-default-context-menu" } },
  { { "file_access_from_file_uris",     "Toggle file access from file uris",   }, 0, 
    (Func)commands_toggle_property,     NULL,                  POST_SM, { .p = "enable-file-acces-from-file-uris" } },
  { { "universal file_access_from_file_uris",   "Toggle universal file access from file uris",   }, 0, 
    (Func)commands_toggle_property,  NULL,   POST_SM, { .p = "enable-universal-file-acces-from-file-uris" } },
  { { "java_applets",          "Toggle java applets",             }, 0, 
    (Func)commands_toggle_property,     NULL,                    POST_SM,    { .p = "enable-java-applets" } },
  { { "plugins",               "Toggle plugins",                  }, 1, 
    (Func)commands_toggle_property,     NULL,                    POST_SM,    { .p = "enable-plugins" } },
  { { "private_browsing",      "Toggle private browsing",         }, 0, 
    (Func)commands_toggle_property,     NULL,                    POST_SM,    { .p = "enable-private-browsing" } },
  { { "page_cache",            "Toggle page cache",               }, 0, 
    (Func)commands_toggle_property,     NULL,                    POST_SM,    { .p = "enable-page-cache" } },
  { { "js_can_open_windows",   "Toggle Javascript can open windows automatically", }, 0, 
    (Func)commands_toggle_property,     NULL,   POST_SM,    { .p = "javascript-can-open-windows-automatically" } },
  { { "enforce_96_dpi",        "Toggle enforce a resolution of 96 dpi", },    0, 
    (Func)commands_toggle_property,     NULL,           POST_SM,    { .p = "enforce-96-dpi" } },
  { { "print_backgrounds",     "Toggle print backgrounds", },      0,    
    (Func)commands_toggle_property,    NULL,                    POST_SM,    { .p = "print-backgrounds" } },
  { { "resizable_text_areas",  "Toggle resizable text areas", },   0,  
    (Func)commands_toggle_property,      NULL,                    POST_SM,    { .p = "resizable-text-areas" } },
  { { "tab_cycle",             "Toggle tab cycles through elements", },  0,   
    (Func)commands_toggle_property,     NULL,              POST_SM,    { .p = "tab-key-cycles-through-elements" } },
  { { "proxy",                 "Toggle proxy",                    },        1,     
    (Func)commands_toggle_proxy,        NULL,                    POST_SM,    { 0 } },
  { { "toggle_scripts_host", "Toggle block content for current host" },   1, 
    (Func) commands_toggle_scripts, NULL,                  POST_SM,    { .n = ALLOW_HOST } }, 
  { { "toggle_scripts_uri",    "Toggle block content for current url" }, 1, 
    (Func) commands_toggle_scripts, NULL,                POST_SM,    { .n = ALLOW_URI } }, 
  { { "toggle_scripts_host_tmp", "Toggle block content for current host for this session" },  1, 
    (Func) commands_toggle_scripts, NULL,      POST_SM,    { .n = ALLOW_HOST | ALLOW_TMP } }, 
  { { "toggle_scripts_uri_tmp", "Toggle block content for current url for this session" },   1, 
    (Func) commands_toggle_scripts, NULL,       POST_SM,    { .n = ALLOW_URI | ALLOW_TMP } }, 
  { { "toggle_plugins_host", "Toggle plugin blocker for current host" },   1, 
    (Func) commands_toggle_plugin_blocker, NULL,                  POST_SM,    { .n = ALLOW_HOST } }, 
  { { "toggle_plugins_uri",    "Toggle plugin blocker for current url" }, 1, 
    (Func) commands_toggle_plugin_blocker, NULL,                POST_SM,    { .n = ALLOW_URI } }, 
  { { "toggle_plugins_host_tmp", "Toggle block content for current domain for this session" },  1, 
    (Func) commands_toggle_plugin_blocker, NULL,      POST_SM,    { .n = ALLOW_HOST | ALLOW_TMP } }, 
  { { "toggle_plugins_uri_tmp", "Toggle block content for current url for this session" },   1, 
    (Func) commands_toggle_plugin_blocker, NULL,       POST_SM,    { .n = ALLOW_URI | ALLOW_TMP } }, 
#ifdef DWB_ADBLOCKER
  { { "toggle_adblocker", "Toggle adblocker" },   1, 
    (Func) commands_toggle_adblocker, NULL,       POST_SM,    { 0 } }, 
#endif
  { { "toggle_hidden_files",   "Toggle hidden files in directory listing" },  1, 
    (Func) commands_toggle_hidden_files, NULL,                  ALWAYS_SM,    { 0 } }, 
  { { "print",                 "Print current page" },                         1, 
    (Func) commands_print, NULL,                             POST_SM,    { 0 } }, 
  { { "execute_userscript",    "Execute userscript" },                 1, 
    (Func) commands_execute_userscript, "No userscripts available",     NEVER_SM,    { 0 } }, 
  { { "fullscreen",    "Toggle fullscreen" },                 1, 
    (Func) commands_fullscreen, NULL,     ALWAYS_SM,    { 0 } }, 
  { { "pass_through",    "Pass-through mode" },                 1, 
    (Func) commands_pass_through, NULL,     POST_SM,    { 0 } }, 
  { { "open_editor",    "Open external editor" },                 1, 
    (Func) commands_open_editor, "No input focused",     NEVER_SM,    { 0 } }, 
};/*}}}*/

/* SETTINGS_ARRAY {{{*/
  /* { name,    description, builtin, global, type,  argument,  set-function */
static WebSettings DWB_SETTINGS[] = {
  { { "auto-load-images",			                   "Load images automatically", },                                         
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "auto-resize-window",			                 "Autoresize window", },                                       
    SETTING_BUILTIN,  BOOLEAN, { .b = false             }, (S_Func) dwb_webkit_setting,  },
  { { "auto-shrink-images",			                 "Automatically shrink standalone images to fit", },                                       
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "cursive-font-family",			               "Cursive font family used to display text", },                                     
    SETTING_BUILTIN,  CHAR,    { .p = "serif"           }, (S_Func) dwb_webkit_setting,  },
  { { "default-encoding",			                   "Default encoding used to display text", },                                        
    SETTING_BUILTIN,  CHAR,    { .p = NULL      }, (S_Func) dwb_webkit_setting,  },
  { { "default-font-family",			               "Default font family used to display text", },                                     
    SETTING_BUILTIN,  CHAR,    { .p = "sans-serif"      }, (S_Func) dwb_webkit_setting,  },
  { { "default-font-size",			                 "Default font size used to display text", },                                       
    SETTING_BUILTIN,  INTEGER, { .i = 12                }, (S_Func) dwb_webkit_setting,  },
  { { "default-monospace-font-size",			       "Default monospace font size used to display text", },                             
    SETTING_BUILTIN,  INTEGER, { .i = 10                }, (S_Func) dwb_webkit_setting,  },
  { { "enable-caret-browsing",			             "Whether to enable caret browsing", },                                          
    SETTING_BUILTIN,  BOOLEAN, { .b = false             }, (S_Func) dwb_webkit_setting,  },
  { { "enable-default-context-menu",			       "Whether to enable the right click context menu", },                             
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "enable-developer-extras",			           "Whether developer extensions should be enabled",    },                              
    SETTING_BUILTIN,  BOOLEAN, { .b = false             }, (S_Func) dwb_webkit_setting,  },
  { { "enable-dns-prefetching",			           "Whether webkit prefetches domain names",    },                              
    SETTING_BUILTIN,  BOOLEAN, { .b = true             }, (S_Func) dwb_webkit_setting,  },
  { { "enable-dom-paste",			                   "Whether to enable DOM paste", },                                        
    SETTING_BUILTIN,  BOOLEAN, { .b = false             }, (S_Func) dwb_webkit_setting,  },
  { { "enable-frame-flattening",			           "Whether to enable Frame Flattening", },                                        
    SETTING_BUILTIN,  BOOLEAN, { .b = false             }, (S_Func) dwb_webkit_setting,  },
  { { "enable-file-access-from-file-uris",			 "Whether file access from file uris is allowed", },                              
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "enable-html5-database",			             "Enable HTML5 client side SQL-database support" },                                    
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "enable-html5-local-storage",			         "Enable HTML5 local storage", },                              
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "enable-java-applet",			                 "Whether to enable java applets", },                                            
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "enable-offline-web-application-cache",		 "Enable HTML5 offline web application cache", },                           
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "enable-page-cache",			                 "Whether to enable page cache", },                                              
    SETTING_BUILTIN,  BOOLEAN, { .b = false             }, (S_Func) dwb_webkit_setting,  },
  { { "enable-plugins",			                     "Whether to enable plugins", },                                                 
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "enable-private-browsing",			           "Whether to enable private browsing mode", },                                        
    SETTING_BUILTIN,  BOOLEAN, { .b = false             }, (S_Func) dwb_set_private_browsing,  },
  { { "enable-scripts",			                     "Enable embedded scripting languages", },                                                  
    SETTING_PER_VIEW,  BOOLEAN, { .b = true              }, (S_Func) dwb_set_scripts,  },
  { { "enable-site-specific-quirks",			       "Enable site-specific compatibility workarounds", },                                    
    SETTING_BUILTIN,  BOOLEAN, { .b = false             }, (S_Func) dwb_webkit_setting,  },
  { { "enable-spatial-navigation",			         "Spatial navigation", },                                      
    SETTING_BUILTIN,  BOOLEAN, { .b = false             }, (S_Func) dwb_webkit_setting,  },
  { { "enable-spell-checking",			             "Whether to enable spell checking", },                                          
    SETTING_BUILTIN,  BOOLEAN, { .b = false             }, (S_Func) dwb_webkit_setting,  },
  { { "enable-universal-access-from-file-uris",	 "Whether to allow files loaded through file:", },                        
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "enable-xss-auditor",			                 "Whether to enable the XSS auditor", },                                             
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "enforce-96-dpi",			                     "Enforce a resolution of 96 dpi", },                                          
    SETTING_BUILTIN,  BOOLEAN, { .b = false             }, (S_Func) dwb_webkit_setting,  },
  { { "fantasy-font-family",			               "Default fantasy font family used to display text", },                                     
    SETTING_BUILTIN,  CHAR,    { .p = "serif"           }, (S_Func) dwb_webkit_setting,  },
  { { "javascript-can-access-clipboard",			   "Whether javascript can access clipboard", },                         
    SETTING_BUILTIN,  BOOLEAN, { .b = false             }, (S_Func) dwb_webkit_setting,  },
  { { "javascript-can-open-windows-automatically", "Whether javascript can open windows", },             
    SETTING_BUILTIN,  BOOLEAN, { .b = false             }, (S_Func) dwb_webkit_setting,  },
  { { "minimum-font-size",			                 "Minimum font size to display text", },                                       
    SETTING_BUILTIN,  INTEGER, { .i = 5                 }, (S_Func) dwb_webkit_setting,  },
  { { "minimum-logical-font-size",			         "Minimum logical font size used to display text", },                               
    SETTING_BUILTIN,  INTEGER, { .i = 5                 }, (S_Func) dwb_webkit_setting,  },
  { { "monospace-font-family",			             "Monospace font family used to display text", },                                   
    SETTING_BUILTIN,  CHAR,    { .p = "monospace"       }, (S_Func) dwb_webkit_setting,  },
  { { "print-backgrounds",			                 "Whether background images should be printed", },                                       
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "resizable-text-areas",			               "Whether text areas are resizable", },                                    
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "sans-serif-font-family",			             "Sans serif font family used to display text", },                                  
    SETTING_BUILTIN,  CHAR,    { .p = "sans-serif"      }, (S_Func) dwb_webkit_setting,  },
  { { "serif-font-family",			                 "Serif font family used to display text", },                                       
    SETTING_BUILTIN,  CHAR,    { .p = "serif"           }, (S_Func) dwb_webkit_setting,  },
  { { "spell-checking-languages",			           "Language used for spellchecking sperated by commas", },                                
    SETTING_BUILTIN,  CHAR,    { .p = NULL              }, (S_Func) dwb_webkit_setting,  },
  { { "tab-key-cycles-through-elements",			   "Tab cycles through elements in insert mode", },              
    SETTING_BUILTIN,  BOOLEAN, { .b = true              }, (S_Func) dwb_webkit_setting,  },
  { { "user-agent",			                         "The user agent string", },                                              
    SETTING_PER_VIEW,                CHAR,    { .p = NULL              }, (S_Func) dwb_set_user_agent,  },
  { { "user-stylesheet-uri",			               "The uri of a stylsheet applied to every page", },                                     
    SETTING_BUILTIN,  CHAR,    { .p = NULL              }, (S_Func) dwb_webkit_setting,  },
  { { "zoom-step",			                         "The zoom step", },                                               
    SETTING_BUILTIN,  DOUBLE,  { .d = 0.1               }, (S_Func) dwb_webkit_setting,  },
  { { "custom-encoding",                         "The custom encoding of the view", },                                         
    SETTING_PER_VIEW,                CHAR,    { .p = NULL           }, (S_Func) dwb_webview_property,  },
  { { "editable",                                "Whether content can be modified", },                                        
    SETTING_PER_VIEW,                BOOLEAN, { .b = false             }, (S_Func) dwb_webview_property,  },
  { { "full-content-zoom",                       "Whether the full content is scaled when zooming", },                                       
    SETTING_PER_VIEW,                BOOLEAN, { .b = false             }, (S_Func) dwb_webview_property,  },
  { { "zoom-level",                              "The default zoom level", },
    SETTING_PER_VIEW,                DOUBLE,  { .d = 1.0               }, (S_Func) dwb_webview_property,  },
  { { "proxy",                                   "Whether to use a HTTP-proxy", },                                              
    SETTING_GLOBAL,      BOOLEAN, { .b = false              },  (S_Func) dwb_set_proxy,  },
  { { "proxy-url",                               "The HTTP-proxy url", },                                          
    SETTING_GLOBAL,      CHAR,    { .p = NULL              },   (S_Func) dwb_soup_init_proxy,  },
  { { "ssl-strict",                               "Whether to allow only save certificates", },                                          
    SETTING_GLOBAL,      BOOLEAN,    { .b = true            },   (S_Func) dwb_soup_init_session_features,  },
  { { "ssl-ca-cert",                               "Path to ssl-certificate", },                                          
    SETTING_GLOBAL,      CHAR,    { .p = NULL            },   (S_Func) dwb_soup_init_session_features,  },
  { { "cookies",                                  "Whether to allow all cookies", },                                     
    SETTING_GLOBAL,      BOOLEAN, { .b = false             }, (S_Func) dwb_init_vars,  },
  { { "cookies-accept-policy",                     "Cookies to accept, always never or nothirdparty", },                                     
    SETTING_GLOBAL,      CHAR, { .p = "always"          }, (S_Func) dwb_set_cookie_accept_policy,  },
  { { "background-tabs",			                     "Whether to open tabs in background", },                                 
    SETTING_GLOBAL,      BOOLEAN,    { .b = false         }, (S_Func) dwb_set_background_tab,  },
  { { "scroll-step",			                     "Whether to open tabs in background", },                                 
    SETTING_GLOBAL,      DOUBLE,    { .d = 0         }, (S_Func) dwb_init_vars,  },

  { { "active-fg-color",                         "Foreground color of the active view", },                              
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#ffffff"         },    (S_Func) dwb_reload_layout,   },
  { { "active-bg-color",                         "Background color of the active view", },                              
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#000000"         },    (S_Func) dwb_reload_layout,  },

  { { "tab-active-fg-color",                     "Foreground color of the active tab", },                           
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#ffffff"         },    (S_Func) dwb_reload_layout,  },
  { { "tab-active-bg-color",                     "Background color of the active tab", },                           
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#000000"         },    (S_Func) dwb_reload_layout,  },
  { { "tab-normal-fg-color",                     "Foreground color of inactive tabs", },                         
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#cccccc"         },    (S_Func) dwb_reload_layout,  },
  { { "tab-normal-bg-color",                     "Background color of inactive tabs", },                         
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#505050"         },    (S_Func) dwb_reload_layout,  },
  { { "tab-number-color",                        "Color of the number in the tab", },                      
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#7ac5cd"         },    (S_Func) dwb_reload_layout,  },
  { { "tab-protected-color",                        "Color of the number in the tab", },                      
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#ff0000"         },    (S_Func) dwb_reload_layout,  },
  { { "tabbed-browsing",                         "Whether to enable tabbed browsing", },                                  
    SETTING_GLOBAL,  BOOLEAN,      { .b = true         },      NULL,  },
  { { "tabbar-position",                         "Position of the tabbar", },                                  
    SETTING_GLOBAL,  CHAR,        { .p = "top"         },      NULL,  },
  { { "sync-history",                            "Interval to save history to hdd or 0 to directly write to hdd", },                                  
    SETTING_GLOBAL|SETTING_ONINIT,  INTEGER,      { .i = 0         },      (S_Func) dwb_set_sync_interval,  },

  { { "active-completion-fg-color",                    "Foreground color of the active tabcompletion item", },                        
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#53868b"         }, (S_Func) dwb_init_style,  },
  { { "active-completion-bg-color",                    "Background color of the active tabcompletion item", },                        
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#000000"         }, (S_Func) dwb_init_style,  },
  { { "normal-completion-fg-color",                    "Foreground color of an inactive tabcompletion item", },                      
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#eeeeee"         }, (S_Func) dwb_init_style,  },
  { { "normal-completion-bg-color",                    "Background color of an inactive tabcompletion item", },                      
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#151515"         }, (S_Func) dwb_init_style,  },

  { { "ssl-trusted-color",                         "Color for ssl-encrypted sites, trusted certificate", },                 
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#00ff00"         }, (S_Func) dwb_init_style,  },
  { { "ssl-untrusted-color",                       "Color for ssl-encrypted sites, untrusted certificate", },                 
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#ff0000"         }, (S_Func) dwb_init_style,  },
  { { "error-color",                             "Color for error messages", },                                         
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#ff0000"         }, (S_Func) dwb_init_style,  },
  { { "prompt-color",                             "Color for prompt messages", },                                         
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#00ff00"         }, (S_Func) dwb_init_style,  },
  { { "status-allowed-color",                        "Color of allowed elements in the statusbar", },           
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#00ff00"       },    (S_Func) dwb_reload_layout,  },
  { { "status-blocked-color",                        "Color of blocked elements in the statusbar", },           
    SETTING_GLOBAL,  COLOR_CHAR, { .p = "#ffffff"       },    (S_Func) dwb_reload_layout,  },

  { { "font",                                    "Default font used for the ui", },                                       
    SETTING_GLOBAL,  CHAR, { .p = "monospace 8"          },   (S_Func) dwb_reload_layout,  },
  { { "font-inactive",                           "Font of views without focus", },                  
    SETTING_GLOBAL,  CHAR, { .p = NULL                   },   (S_Func) dwb_reload_layout,  },
  { { "font-entry",                              "Font of the addressbar", },                            
    SETTING_GLOBAL,  CHAR, { .p = NULL                   },   (S_Func) dwb_reload_layout,  },
  { { "font-completion",                         "Font for tab-completion", },                            
    SETTING_GLOBAL,  CHAR, { .p = NULL                   },   (S_Func) dwb_reload_layout,  },
   
  { { "hint-letter-seq",                       "Letter sequence for letter hints", },             
    SETTING_PER_VIEW,  CHAR, { .p = "FDSARTGBVECWXQYIOPMNHZULKJ"  }, (S_Func) dwb_reload_scripts,  },
  { { "hint-highlight-links",                  "Whether to highlight links in hintmode", },             
    SETTING_PER_VIEW,  BOOLEAN, { .b = false  }, (S_Func) dwb_reload_scripts,  },
  { { "hint-style",                              "Whether to use 'letter' or 'number' hints", },                     
    SETTING_PER_VIEW,  CHAR, { .p = "letter"            },     (S_Func) dwb_reload_scripts,  },
  { { "hint-font",                          "Font size of hints", },                                        
    SETTING_PER_VIEW,  CHAR, { .p = "bold 10px monospace"             },     (S_Func) dwb_reload_scripts,  },
  { { "hint-fg-color",                           "Foreground color of hints", },                                 
    SETTING_PER_VIEW,  CHAR, { .p = "#000000"      },     (S_Func) dwb_reload_scripts,  },
  { { "hint-bg-color",                           "Background color of hints", },                                 
    SETTING_PER_VIEW,  CHAR, { .p = "#ffffff"      },     (S_Func) dwb_reload_scripts,  },
  { { "hint-active-color",                       "Color of the active link in hintmode", },                                
    SETTING_PER_VIEW,  CHAR, { .p = "#00ff00"      },     (S_Func) dwb_reload_scripts,  },
  { { "hint-normal-color",                       "Color of inactive links in hintmode", },                              
    SETTING_PER_VIEW,  CHAR, { .p = "#ffff99"      },     (S_Func) dwb_reload_scripts,  },
  { { "hint-border",                             "Border used for hints", },                                      
    SETTING_PER_VIEW,  CHAR, { .p = "1px solid #000000"    }, (S_Func) dwb_reload_scripts,  },
  { { "hint-opacity",                            "The opacity of hints", },                                     
    SETTING_PER_VIEW,  DOUBLE, { .d = 0.8         },          (S_Func) dwb_reload_scripts,  },
  { { "auto-completion",                         "Show possible shortcuts", },                                
    SETTING_GLOBAL,  BOOLEAN, { .b = false         },     (S_Func)completion_set_autcompletion,  },
  { { "startpage",                               "The default homepage", },                                        
    SETTING_GLOBAL,  CHAR,    { .p = "dwb://bookmarks" },        (S_Func)dwb_set_startpage,  }, 
  { { "single-instance",                         "Whether to have only on instance", },                                         
    SETTING_GLOBAL,  BOOLEAN,    { .b = true },          (S_Func)dwb_set_single_instance,  }, 
  { { "save-session",                            "Whether to automatically save sessions", },                                       
    SETTING_GLOBAL,  BOOLEAN,    { .b = true },          NULL,  }, 
  

  /* downloads */
  { { "download-external-command",                        "External program used for downloads", },                               
    SETTING_GLOBAL,  CHAR, { .p = "xterm -e wget 'dwb_uri' -O 'dwb_output' --load-cookies 'dwb_cookies'"   },     NULL,  },
  { { "download-directory",                        "Default download directory", },                               
    SETTING_GLOBAL,  CHAR, { .p = NULL   },     NULL,  },
  { { "download-use-external-program",           "Whether to use an external download program", },                           
    SETTING_GLOBAL,  BOOLEAN, { .b = false         },    NULL,  },

  { { "complete-history",                        "Whether to complete browsing history with tab", },                              
    SETTING_GLOBAL,  BOOLEAN, { .b = true         },     (S_Func)dwb_init_vars,  },
  { { "complete-bookmarks",                        "Whether to complete bookmarks with tab", },                                     
    SETTING_GLOBAL,  BOOLEAN, { .b = true         },     (S_Func)dwb_init_vars,  },
  { { "complete-searchengines",                   "Whether to complete searchengines with tab", },                                     
    SETTING_GLOBAL,  BOOLEAN, { .b = false         },     (S_Func)dwb_init_vars,  },
  { { "complete-commands",                        "Whether to complete the command history", },                                     
    SETTING_GLOBAL,  BOOLEAN, { .b = true         },     (S_Func)dwb_init_vars,  },
  { { "complete-userscripts",                        "Whether to complete userscripts", },                                     
    SETTING_GLOBAL,  BOOLEAN, { .b = false         },     (S_Func)dwb_init_vars,  },

  { { "use-fifo",                        "Create a fifo pipe for communication", },                            
    SETTING_GLOBAL,  BOOLEAN, { .b = false         },     NULL,  },
    
  { { "default-width",                           "Default width of the window", },                                           
    SETTING_GLOBAL,  INTEGER, { .i = 800          }, NULL,  },
  { { "default-height",                          "Default height of the window", },                                           
    SETTING_GLOBAL,  INTEGER, { .i = 600          }, NULL,  },
  { { "message-delay",                           "Time in seconds, messages are shown", },                                           
    SETTING_GLOBAL,  INTEGER, { .i = 2          }, (S_Func) dwb_set_message_delay,  },
  { { "history-length",                          "Length of the browsing history", },                                          
    SETTING_GLOBAL,  INTEGER, { .i = 500          }, (S_Func) dwb_set_history_length,  },
  { { "navigation-history-max",                          "Length of the browsing history", },                                          
    SETTING_GLOBAL,  INTEGER, { .i = 500          }, (S_Func) NULL,  },
  { { "top-statusbar",                                  "Whether to have the statusbar on top", },     
    SETTING_GLOBAL,  BOOLEAN, { .b = false },  NULL,  },
  { { "scrollbars",                                  "Whether scrollbars should be enabled", },     
    SETTING_GLOBAL,  BOOLEAN, { .b = false },  NULL,  },
  { { "mail-client",                            "Program used for mailto:-urls", },                                            
    SETTING_GLOBAL,  CHAR, { .p = "xterm -e mutt 'dwb_uri'" }, NULL,  }, 
  { { "ftp-client",                            "Program used for ftp", },                                            
    SETTING_GLOBAL,  CHAR, { .p = "xterm -e ncftp 'dwb_uri'" }, NULL,   }, 
  { { "editor",                            "External editor", },                                            
    SETTING_GLOBAL,  CHAR, { .p = "xterm -e vim dwb_uri" }, NULL,   }, 
#ifdef DWB_ADBLOCKER
  { { "adblocker",                               "Whether to block advertisements via a filterlist", },                   
    SETTING_GLOBAL,  BOOLEAN, { .b = false }, (S_Func)dwb_set_adblock,   }, 
  { { "adblocker-filterlist",                    "Path to a filterlist", },                   
    SETTING_GLOBAL,  CHAR, { .p = NULL }, NULL,   }, 
#endif
  { { "plugin-blocker",                         "Whether to block flash plugins and replace them with a clickable element", },                   
    SETTING_PER_VIEW,  BOOLEAN, { .b = true }, (S_Func)dwb_set_plugin_blocker,   }, 
  { { "plugin-blocker",                         "Whether to block flash plugins and replace them with a clickable element", },                   
    SETTING_PER_VIEW,  BOOLEAN, { .b = true }, (S_Func)dwb_set_plugin_blocker,   }, 
};/*}}}*/
