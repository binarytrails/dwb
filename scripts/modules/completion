var util    = namespace("util");
var gui     = namespace("gui");

function htmlContent() {
/*HEREDOC
<head>
<style type="text/css">
body {
    margin:0; 
    padding:0; 
    border-top:1px solid #000;
}
.line {
    width : 100%;
}
.lineSelected {
    width : 100%;
}
.label {
    display:inline-block;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
    margin:0; 
    padding:0; 
}
.label.left {
    width : 50%;
    padding-right:5px;
}
.label.right {
    width:45%;
    float:right;
    text-align:right;
    padding-left:5px;
}
#content {
    width : 100%; 
    height : 100%; 
    margin:0; 
    padding:0;
    overflow-x:none;
}
* {
    -webkit-user-select:none;
}
</style>
</head>
<body>
<div id="content"></div>
</body>
HEREDOC*/
}

function injectable() {
    var mSelectedIdx = -1; 
    var mElements;
    function clear() {
        document.getElementById("content").innerHTML = "";
        mElements = null;
        mSelectedIdx = -1;
    }
    function getSelected() {
        return mElements[mSelectedIdx].dataset.id;
    }
    function select(dir) {
        var l = mElements.length, element;
        if (l == 0) {
            return;
        }
        else if (mSelectedIdx == -1) {
            mSelectedIdx = 0;
        }
        else if (l > 1) {
            mElements[mSelectedIdx].className = "line";
            mSelectedIdx += dir;
            mSelectedIdx = mSelectedIdx < 0 ? (l-1) : (mSelectedIdx > l-1 ? 0 : mSelectedIdx);
        }
        else {
            return; 
        }
        element = mElements[mSelectedIdx];
        element.className = "lineSelected";
        element.scrollIntoView();
    }
    function createElement(tag, refElement, props) {
        var element, key;
        var element = document.createElement(tag);
        for (key in props) {
            element[key] = props[key];
        }
        refElement.appendChild(element);
        return element;
    }
    function update(data) {
        clear();
        var content = document.createDocumentFragment();
        mElements = data.map(function(tab, i) {
            var className = "line ";
            var element = createElement("div", content, {
                className : "line",
            });
            createElement("div", element, {
                textContent : tab.leftLabel || "",
                className : "label left"
            });
            createElement("div", element, {
                textContent : tab.rightLabel || "", 
                className : "label right"
            });
            element.dataset.id = i;
            return element;
        });
        select();
        document.getElementById("content").appendChild(content);
    }
    function applyStyle(styles) {
        var selector, style, i, sheet, item;
        var styleSheets = document.styleSheets[0].cssRules;
        for (i=styleSheets.length - 1; i>=0; --i) {
            sheet = styleSheets[i];
            if ((style = styles[sheet.selectorText])) {
                for (selector in style) {
                    sheet.style[selector] = style[selector];
                }
            }
        }
    }
}

function getWidget() {
    var widget, wp, is, iw;
    widget = new HiddenWebView();

    widget.canFocus = false;
    widget.transparent = true;

    gui.mainBox.packStart(widget, false, false, 0);
    wp = settings.widgetPacking;
    is = wp.search(/[sS]/);
    iw = wp.indexOf("w");
    if (is > iw) {
        gui.mainBox.reorderChild(widget, is);
    }
    else {
        gui.mainBox.reorderChild(widget, is + 1);
    }
    widget.loadString(util.hereDoc(htmlContent));
    widget.inject(injectable, null, 64, true);
    return widget;
}

function Completion(args) {
    if (!args.shortcut) {
        throw new Error("Completion no shortcut defined!");
    }
    if (!args.onUpdate) {
        throw new Error("Completion: onUpdate not defined!");
    }
    if (!args.onSelected) {
        throw new Error("Completion: onSelected not defined!");
    }
    ++Completion._lastId;
    this._id = Completion._lastId;

    util.mixin(this, args);

    this._startup();
}

Object.defineProperties(Completion.prototype, {
    // private
    _sigKeyPress    : { value : null,   writable : true },
    _sigKeyRelease  : { value : null,   writable : true },
    _idLabelNotify  : { value : -1,     writable : true },
    _lastText       : { value : "",     writable : true },
    _data           : { value : null,   writable : true },
    _height         : { value : 0,      writable : true }, 

    _cleanup : {
        value : function() {
            var widget = Completion.widget;
            this._sigKeyRelease.disconnect();
            this._sigKeyPress.disconnect();
            gui.messageLabel.disconnect(this._idLabelNotify);
            this._idLabelNotify = -1;
            gui.messageLabel.label = "";

            widget.inject("clear()");
            widget.visible = false;
            this.onHide();

            this._height = 0;
            this._lastText = "";
            this._data = null;
            util.normalMode();
        }
    }, 
    _getSelected : { 
        value : function() {
            var id = JSON.parse(Completion.widget.inject("return getSelected()"));
            var item = this._data[id]; 
            if (item) {
                this.onSelected(item);
            }
            else {
                this.onHide();
            }
        }
    },
    _doUpdate : { 
        value : function(data) {
            this._data = data;
            var widget = Completion.widget;
            if (this._data && this._data.length > 0) {
                widget.inject("update(" + JSON.stringify(this._data) + ")");
            }
            else {
                widget.inject("clear()");
            }
            if (this.height) {
                return;
            }
            var oldHeight = this._height;
            this._height = Math.min(this._data.length, this.visibleItems) * (this.fontSize + this.lineSpacing);
            if (this._height == 0)  {
                widget.visible = false;
                return;
            }
            if (oldHeight != this._height) {
                widget.heightRequest = this._height;
            }
            if (oldHeight == 0) {
                widget.visible = true;
            }
        }
    },
    _onKeyPress : {
        value : function(w, e) {
            switch(e.name) {
                case "Return" : 
                    this._getSelected();
                    this._cleanup();
                    return true;
                case "Escape" : 
                    this._cleanup();
                    return true;
                case "Down" :
                case "Tab" : 
                    Completion.widget.inject("select(1)");
                    return true;
                case "Up" :
                case "ISO_Left_Tab" : 
                    Completion.widget.inject("select(-1)");
                    return true;
                default : 
                    return false;
            }
        }
    },
    _onKeyRelease : { 
        value : function(w, e) {
            if (e.isModifier) {
                return;
            }
            var text = gui.entry.text.trim();
            if (text == this._lastText) {
                return;
            }
            this._lastText = text;
            this._doUpdate(this.onUpdate(text));
        }
    },
    _onUpdateLabel : {
        value : function() {
            if (gui.messageLabel.label != this.label) {
                gui.messageLabel.label = this.label;
            }
            return true;
        },
    },
    _bindCallback : {
        value : function() {
            var widget = Completion.widget;
            if (Completion._lastStyle != this._styleId) {
                widget.inject("applyStyle(" + Completion._styles[this._styleId] + ")");
                Completion._lastStyle = this._styleId;
            }

            gui.messageLabel.label = this.label;
            gui.entry.visible = true;
            gui.entry.hasFocus = true;
            this._idLabelNotify = gui.messageLabel.notify("label", this._onUpdateLabel.bind(this));

            this._sigKeyPress.connect();
            this._sigKeyRelease.connect();

            this._doUpdate(this.onShow());
            if (this.height) {
                widget.visible = true;
            }
        }
    }, 
    _startup : {
        value : function() {
            var style = JSON.stringify({ 
                body : { 
                    "background-color" : this.bgColor || settings.normalCompletionBgColor,
                    "color" : this.fgColor || settings.normalCompletionFgColor, 
                    "font-size" : this.fontSize,
                    "font-family" : this.fontFamily,
                },
                ".lineselected" : {
                    "background-color" : this.selectedBgColor || settings.activeCompletionBgColor,   
                    "color" : this.selectedFgColor || settings.activeCompletionFgColor,
                },
                ".label.right" : {
                    "margin-right" : this.margin || "3", 
                },
                ".label.left" : {
                    "margin-left" : this.margin || "3", 
                }, 
                "#content" : {
                    "overflow-y" : this.overflow || "auto" 
                }

            });
            if (!Completion._styles.some(function(s, i) {
                if (s == style) {
                    this._styleId = i;
                    return true;
                }
            }, this)) {
                this._styleId = Completion._styles.push(style) - 1;
            }

            this._sigKeyPress   = Signal("keyPress", this._onKeyPress.bind(this));
            this._sigKeyRelease = Signal("keyRelease", this._onKeyRelease.bind(this));

            bind(this.shortcut, this._bindCallback.bind(this));

            if (this.height) {
                Completion.widget.heightRequest = this.height;
            }
            this.onShow = this.onShow || this.onUpdate;
        }
    }, 
    // public overridable properties
    onUpdate        : { value : null,           writable : true },
    onSelected      : { value : null,           writable : true },
    shortcut        : { value : null,           writable : true }, 
    label           : { value : ":",            writable : true }, 
    visibleItems    : { value : 11,             writable : true },
    fontSize        : { value : 11,             writable : true },
    fontFamily      : { value : "monospace",    writable : true },
    lineSpacing     : { value : 2,              writable : true },
    onHide          : { value : function(){},   writable : true }
});

Object.defineProperties(Completion, {
    _lastStyle : {
        value : -1, writable : true
    },
    _styles : {
        value : []
    },
    widget : { 
        value : getWidget() 
    } 
});

return Completion;
/* vim: set ft=javascript: */
