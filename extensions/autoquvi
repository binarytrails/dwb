/*
 * autoquvi 
 *
 * This plugin automatically loads videos supported by quvi with an external
 * video player
 *
 * Config options:
 *
 * quvi       : quvi command
 * player     : external player
 * autoPlay   : whether to autoplay videos
 * shortcut   : the shortcut that spawns quvi
 *
 * */ 


var me = "autoquvi";
var defaultConfig = { 
  quvi      : "quvi",  
  player    : "mplayer %u", 
  autoPlay  : true, 
  shortcut  : null
};
var config = {};

var supported = [];
function quviSpawn(wv) {
  var auto = true;
  if (wv == undefined) {
    wv = tabs.current;
    auto = false;
  }
  for (var i=0; i<supported.length; i++) {
    var s = supported[i];
    if (s.test(wv.uri)) {
      system.spawn(config.quvi + " " + wv.uri + " --exec " + JSON.stringify(config.player));
      return;
    }
  }
  if (auto === false) 
    io.error("Not supported by quvi");
}
function stdoutCallback(response) {
  var lines = response.split("\n");
  for (var i=0; i<lines.length; i++) {
    if (lines[i]) {
      try {
        var pattern = lines[i].match(/^\s*\S+/)[0];
        supported.push(new RegExp(pattern.replace(/%/g, "\\")));
      } 
      catch(e) {
        extensions.error(me, e);
      }
    }
  }
  if (config.autoPlay) {
    signals.connect("loadCommitted", quviSpawn);
  }
  if (typeof config.shortcut === "string") {
    io.print(config.shortcut);
    bind(config.shortcut, quviSpawn);
  }
}
return { 
  init : function (c) {
    var stat;
    var key;
    if (c !== null) {
      for (key in defaultConfig) {
        config[key] = c[key] !== undefined ? c[key] : defaultConfig[key];
      }

    }
    try {
      stat = system.spawn(config.quvi + " --support", stdoutCallback);
      if (stat == 0) {
        return true;
      }
    }
    catch(e) {
      extensions.error(me, "Initiating quvi failed, aborting: " + e);
    }
    return false;
  }
};

// vim: set ft=javascript:
