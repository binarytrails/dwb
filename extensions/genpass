/*
 * genpass is an extension that creates domain based passwords, it uses a 
 * modified base64 encoded hash (sha256, sha1 or md5) of a salted master
 * password and injects the password into password fields.
 *
 * Config options:
 *
 * domainSalts        : Object of domain salts that will additionally be used
 *                      for passwords
 *
 *                      domainSalts : { 
 *                        "example.com"   : "eisll3§slajbBAkll2j4klaöalkjfkslk", 
 *                        "example.co.uk" : "abyaj3kdjlkj"
 *                      }
 *
 * hashMethod         : The hashmethod used, either ChecksumType.sha256,
 *                      ChecksumType.sha1 or ChecksumType.md5
 *
 * numberOfHashes     : number of times the password is hashed.
 *
 * passwordLength     : The length of the generated password
 *
 * salt               : The salt appended to the password. 
 *
 * saveMasterPassword : Whether to save the masterpassword, if set to false one
 *                      will be prompted each time this plugin executed
 *
 * shortcut           : The default shortcut that executes the main function of
 *                      this extension
 *
 * */

var defaultConfig = {
  salt : "",
  numberOfHashes : 1000, 
  hashMethod : ChecksumType.sha256,
  saveMasterPassword : true,
  domainSalts : {}, 
  defaultShorcut : "ep",
  passwordLength : 12
};

var config = {};
var master = null;

// Modified base64-encode converts groups of 2 characters (8-bit since the hash
// is hexadecimal) to 4 modified base64 encoded characters that contain no / and +
function encode(string) {
  var result = new String();
  var current, i;
  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  var n24;
  for (i=0; i<string.length-6; i+=6) {
    current = parseInt(string.substring(i, i+2), 16) ;
    n24 = (parseInt(string.substring(i, i+2), 16) << 16) + (parseInt(string.substring(i+2, i+4), 16) << 8) + parseInt(string.substring(i+4, i+6), 16);
    result += chars[n24>>18 & 63] + chars[n24>>12 & 63] + chars[n24>>6 & 63] + chars[n24 & 63]; 
  }
  return result;
}

// Extract the password, should at least contain 1 numeric character
function extract(string) {
  var first = string.search(/\d/);
  if (first == -1) 
    string = "3" + string;
  else if (first >= config.passwordLength) {
    string = string.substring(first) + string;
  }
  return string.substring(0, config.passwordLength);
}

// The function injected in every frame, can only be used in the webcontext
function injectFunction(password) {
  var active = document.activeElement;
  if (active instanceof HTMLInputElement && active.type == "password") {
    active.value = password;
  }
  else {
    active = document.body.querySelector("input[type='password']");
    active.value = password;
  }
}
// Main function
function setPass() {
  var i;
  var domain = tabs.current.mainFrame.domain;
  if (master === null) {
    master = io.prompt("Master password:", false);
    if (master === null) 
      return;
  }
  var pass = tabs.current.mainFrame.domain + master;
  var salt = config.salt;
  if (!config.saveMasterPassword)
    master = null;
  if (config.domainSalts[domain]) {
    salt += config.domainSalts[domain];
  }
  for (i=0; i<config.numberOfHashes; i++) {
    pass = checksum(pass + salt, config.hashMethod);
  }
  pass = encode(pass);
  pass = extract(pass);

  var frames = tabs.current.allFrames;
  for (i = 0; i<frames.length; i++) {
    frames[i].inject("(" + String(injectFunction) + ")('" + pass + "');");
  }
}

return {
  init : function (c) {
    // con
    config.salt = c.salt || defaultConfig.salt;
    config.numberOfHashes = c.numberOfHashes || defaultConfig.numberOfHashes;
    config.hashMethod = c.hashMethod >= ChecksumType.md5 && c.hashMethod.sha256
      ? c.hashMethod : defaultConfig.hashMethod;
    config.domainSalts = c.domainSalts || defaultConfig.domainSalts;
    config.shortcut = c.defaultShorcut || defaultConfig.defaultShorcut;
    config.saveMasterPassword = c.saveMasterPassword !== undefined && c.saveMasterPassword !== null 
      ? c.saveMasterPassword : defaultConfig.saveMasterPassword;
    config.passwordLength = c.passwordLength || defaultConfig.passwordLength;

    bind(config.shortcut, setPass);
    return true;
  }
};
// vim: set ft=javascript:
