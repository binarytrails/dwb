= dwb's JavaScript API documentation =

== Abstract == 

*dwb* can be extended with different types of userscripts. 
This api documentation describes the javascript interface. 

== Getting Started == 
Scripts that use the javascript api must be located in
+$XDG_CONFIG_HOME/dwb/userscripts+ like any other script. 
To include a userscript put a script with
shebang

-------
#!javascript
-------

in the userscripts directory.
All scripts with this shebang will be executed in the same global context so it
must be taken care to encapsulate the data if more than one script is used (see
also <<Encapsulation>>). 


:numbered!:
:caption:

== Signals ==
With the +signals+ object *dwb* communicates with the script on certain events. 
To connect to a signal one can call the connect function that is implemented by
the signals object, that takes 2 arguments, the name of the signal and a
callback function. 

The callback function always has 2 parameters, the object which
received the signal and another object which contains values relevant to the
signal. A callback function should either return +true+ or +false+ or nothing which is
equivalent to +false+.
If multiple callbacks are connected to the same signal and one callback
function returns +true+ the overall return value will be +true+.

*dwb* only emits signals as long as one callback is connected to a signal. To
reduce overhead one should disconnect from the signal when it is no longer
needed. 

The signals object implements the following functions

.Functions
[options="header", cols="1s,1m,3,2,2"]
|=============================================
|function               2+| parameter | returns | description 

.2+|connect 
|String |The signal to connect to; *required* .2+| The
signal id of the signal or +-1+ if the signal was not connected.
.2+| Connects to a signal.

|Function(+Object+, +Object+) | The callback to call when the signal is emitted; *required*

|disconnect 
|Number |The signal id of the signal; *required* | - 
| Disconnects from a signal, the id is the id returned by 
+connect+.


.3+|emit 
|String |The signal to emit; *required* .3+| - 
.3+| Emits a signal. 
|Object |Object passed to the callback function; *optional*
|Object |Object passed to the callback function; *optional*


|=============================================

The global signals implemented by *dwb* are

[options="header", cols="2s,2m,2m,4,4"]
|=============================================
|signal               |first parameter  2+|object properties  |description 

.9+|buttonPress .9+| focused <<webview>>
|button|The button that is pressed, usually a value between 1 and 5
.9+|Emitted when a button is pressed, only clicks on the webview are noticed;
return +true+ to stop the default action
|context|A <<ButtonContext>>, i.e. the element under the cursor when the button
was pressed
|state|A bitmap of modifiers pressed, see <<Modifier>>
|time|The time in milliseconds when the button was pressed 
|type|A <<ClickType>>
|x|x-position relative to the window
|xRoot|x-position relative to the screen
|y|y-position relative to the window
|yRoot|y-position relative to the screen

|buttonRelease | focused <<webview>>
2+d|Same as *buttonPress* but without +type+
|Emitted when a button is released, only clicks on the webview are noticed;
return +true+ to stop the default action

.5+|download .5+| focused <<webview>>
|filename|The suggested filename 
.5+|Emitted before a download starts. Return +true+ to handle the signal or +false+ to let *dwb* handle the signal.
|mimeType|The mimetype of the file or +unknown+
|referer|The referer of the request
|uri|The uri of the file to download
|totalSize|The total size of the file

.4+|downloadStatus .4+| focused <<webview>>
|filename|The filename 
.4+|Emitted when the download status changes
|mimeType|Mimetype of the file or +unknown+
|status|A <<DownloadStatus>>
|uri|Original uri of the file

.5+|keyPress .5+| focused <<webview>>
|isModifier | Whether or not the key is a modifier
.5+|Emitted when a key is pressed, the first parameter of the callback function
will always be the currently focued <<webview>>; return +true+ to stop the
default action
|keyCode | Hardware keycode
|keyVal | Keycode as listed in gdkkeysyms.h 
|name | A string represantation of the key
|state | A bitmap of modifiers pressed, see <<Modifier>>

|keyRelease | focused <<webview>>
2+d|Same as *keyPress*
|Emitted when a key is released; return +true+ to stop the
default action


|tabFocus | focused <<webview>>
|last| Number of the previously focused tab
|Emitted when a new tab gets focus, the first parameter will be the new
<<webview>>; return +true+ to prevent the tab being changed
|=============================================


.Example 
[source,javascript]
------
function loadStatusCallback(wv, values) {
  if (obj.status == LoadStatus.finished) {
    io.print(values.uri);
    signals.disconnect(id);
  }
}
var id = signals.connect("loadStatus", loadStatusCallback);
------


== Global functions ==
Functions from the global object.

[options="header", cols="1s,1m,3,3,3"]
|=============================================
|function               2+| parameter | returns |description 

|execute
|String
| dwb-command to execute; *required*                       | 
+true+ if successfull, +false+ otherwise  |
Executes a dwb-command in the focused tab.    

[[include]]
.2+|include
|String| Path to a file to include; *required*        
.2+| The value returned from the script. Note that a value can only be returned
from a script that is encapsulated either by encapsulating the script yourself, 
or by omitting or passing +false+ to the second parameter. 
.2+| Includes a file. Note that there is only one context, all scripts are
executed in this context. Included files are always included in the global
scope but encapsulated in a function unless you pass +true+ as the second
parameter. 
|Boolean| +true+ if the script should be applied to the global scope, objects in
the script will be visible in all scripts, +false+ to encapsulate the script;
*optional*, default +false+

|plugin [red]#todo#
|String | Name of the plugin to load 
| - 
|Loads a system plugin

.2+|timerStart 
|Number |Interval in milliseconds
.2+|An +id+ for the timeout or -1 if an error occured
.2+|Executes a function repeatedly until the function returns false or
*timerStop* is called on the +id+ returned from *timerStart*
|Function() |Function to execute

|timerStop 
|Number |The +id+ returned from *timerStart*
|+true+ if the timeout was stopped
|Stops execution of a function started by timoutStart

|=============================================

.Example
[source,javascript]
---------------------------------
execute("tabopen ixquick.com");

// Execute a function once, similar to window.setTimeout()
timerStart(2000, function() { 
  tabs.current.inject("alert('Hello world')");
  return false;
});
---------------------------------

[[Globalobjects]]
== Global Objects ==

[[data]] 
=== data ===
The +data+ object can be used to determine internally used data securely. All
properties are readonly Strings.

.Properties
[options="header", cols="2s,10"]
|=============================================
|bookmarks  |Bookmark file 
|cacheDir  |Cache directory 
|configDir  |Config directory 
|cookies  |Cookie file 
|cookiesWhitelist  |Whitelist for persistent cookies 
|customKeys  |Custom keyboard shortcuts 
|history  |History file 
|keys  |Shortcuts configuration file 
|pluginsWhitelist  |Whitelist for the plugin blocker
|profile  |Profile which will be +default+ unless another profile is specified on command line
|quickmarks  |Quickmark file 
|scriptWhitelist  |Whitelist for scripts
|session  |File with stored sessions for this profile
|sessionCookiesWhitelist  |Whitelist for session cookies
|settings  |Settings configuration file
|searchEngines  |Searchengines 
|=============================================

.Example
[source,javascript]
---------------------------------
// Get contents of the currently used bookmark file
var bookmarks = io.read(data.bookmarks);
--------------------------------

[[io]]
=== io ===
The +io+ object implements functions for input and output. 

[options="header", cols="1s,1m,3,2,2"]
|=============================================
|function               2+| parameter | returns |description 
.2+|print
|String | Text to print; *required*
.2+| - 
.2+|Print text to +stdout+ or +stderr+
|String | Pass +"stderr"+ to print to stderr; *optional*

.3+|write          | 
String| Path to a file to write to; *required* .3+|
+true+ if successfull, +false+ otherwise .3+|
Write text to a local file
|String|Either +"a"+ if the text should be appended or +"w"+ to create a new file; *required*
|String | Text that should be written to the file; *required*

| read
| String | A path to a file to read; *required*
| A string with the content of the file if reading was successfull, +null+
otherwise.|Get content of a local file

|=============================================

.Example
[source,javascript]
---------------------------------
var text = io.read("/home/foo/textfile.txt");
io.print(text);
--------------------------------

[[system]]
=== system ===

The +system+ object implements system functions.

[options="header", cols="1s,1m,2,2,2"]
|=============================================
|function               2+| parameter | returns |description 
.3+|spawn 
|String | Command to execute; *required*
.3+|Returns <<SpawnError>>
.3+|Executes a shell command using the default searchpath
|Function(+String+) | callback for stdout, pass +null+ if only stderr is needed; *optional*
|Function(+String+) | callback for stderr; *optional*

|getEnv 
|String | Name of the variable; *required*
|String containing the variable or +null+ if the variable was not found
|Get a system environment variable.
|=============================================

.Example
[source,javascript]
------------
var home = system.getEnv("HOME");
// async wrapped read
function asyncread(filename) {
  system.spawn("cat " + filename, function (response) {
      ...
  });
}
asyncread(home + "/.bashrc");
------------


[[tabs]]
=== tabs ===
The +tabs+ object implements functions and properties to get +webview+ objects. 

.Properties
[options="header", cols="2s,2m,1s,10"]
|=============================================
|name |type|mode| description
|current |<<webview>>| ro |The currently focused tab
|length |Number |ro| The total number of tabs
|number |Number |ro| The number of the currently focused tab

|=============================================

.Functions
[options="header", cols="1s,1m,3,2,2"]
|=============================================
|function               2+| parameter | returns |description 
|nth |Number |Number of the tab, counting from 0; *required* | A <<webview>> object or +null+ if
an error occured | Gets the webview object of the nth tab.

|=============================================


.Example 
[source,javascript]
----
var c = tabs.current;
tabs.nth(2).uri = c.uri;
----

[[Webkitobjects]]
== Webkit objects ==

[[webview]]
=== webview ===
The +webview+ object represents the widget that actually displays the site
content.
The +webview+ object will be the first parameter of every signal function. 

.Properties
[options="header", cols="2s,2m,1s,10"]
|=============================================
|name |type | mode| description
|uri |String |rw | The uri of the +webview+
|title |String|ro | The title of the +webview+
|=============================================

.Example
[source,javascript]
------------
if (wv.title == "Title") {
  wv.uri = "http://example.com";
}
------------

.Functions

[options="header", cols="1s,1m,2,2,4"]
|=============================================
|function               2+| parameter | returns |description 
|set 
|Object       |An object with properties to set; *required*
|+false+ if an error occurs, +true+ otherwise   
|Sets the webviews properties, valid properties are the properties of 
http://webkitgtk.org/reference/webkitgtk/stable/WebKitWebSettings.html[WebKitWebSettings].

|get 
|String       |The name of the property to get; *required*
|A String containing the property value
|Sets the webviews properties, valid properties are the properties of 
http://webkitgtk.org/reference/webkitgtk/stable/WebKitWebSettings.html[WebKitWebSettings].
Note that this function always returns a String, for boolean values it returns
+TRUE+ or +FALSE+.

.2+|inject 
|String | Script to inject
.2+|+true+ if the script was injected, +false+ otherwise.
.2+|Injects a script into the +webview+
|Boolean | +true+ to inject the script in the global scope, +false+ to encapsulate it
in a function; *optional*, default +false+

|history 
|Number       |Number of steps; *required*
|-
|Loads the history item +steps+ away from the current item. 

|reload 
|-       |
|- 
|Reload the +webview+

|=============================================


.Signals
[options="header", cols="2s,2m,2m,4,4"]
|=============================================
|signal               |first parameter  2+|object properties  |description 
.2+|[[loadStatus]]loadStatus .2+| <<webview>>
|status|The <<LoadStatus>>
.2+|Emitted when the load status changes.
|uri|Uri that is currently loaded

|[[loadCommitted]]loadCommitted | <<webview>>
|uri|Uri that will be loaded
|Emitted when the load has just commited, no data has been loaded when this
signal is emitted. This
is the preferred signal for injected scripts that do not manipulate the DOM.

|[[loadFinished]]loadFinished | <<webview>>
|uri|Uri that is has been loaded
|Emitted when the site has completely loaded. 

.2+|mimeType .2+| <<webview>>
|mimeType| The mime-type
.2+|Decide whether or not to show a given mimetype. Return true to stop the request.
|uri| Uri of the request

.2+|navigation          .2+| <<webview>>
|uri | Uri of the request 
.2+| Emitted before a new site is loaded, return +true+ to stop the request.
|reason | Reason for the request where +reason+ is a <<NavigationReason>>


|resource | <<webview>>
|uri | Uri of the request 
|Emitted before a new resource is loaded, return +true+ to stop the request.
|=============================================


.Example
[source,javascript]
------------
signals.connect("navigation",  function (o, obj) {
  if (/.*youtube.*/.test(obj.uri)) {
    o.set({
      "enable-plugins" : true, 
      "enable-scripts" : true
    });
  }
});
------------

NOTE: If a script is injected from a <<loadStatus>>-callback the script must be
injected after +LoadStatus.committed+ has been emitted.
On +LoadStatus.committed+ the document 
hasn't been created, if the script modifies the DOM it should be injected on
+LoadStatus.finished+. 
If only +LoadStatus.committed+ or +loadFinished.committed+ are used it is better
to use the corresponding signals instead to reduce overhead. 


[[frame]]
=== frame ===

A frame represents a +frame+ or +iframe+. Due to cross site scripting policy it
is not possible to inject scripts from a <<webview>> into iframes with a
different domain. For this purpose the +frame+ object can be used. 

.Properties
[options="header", cols="2s,2m,1s,10"]
|=============================================
|name |type | mode| description
|name |String |ro | The name of the +frame+
|uri |String |ro | The uri of the +frame+
|title |String|ro | The title of the +frame+
|=============================================

.Functions

[options="header", cols="1s,1m,3,2,2"]
|=============================================
|function               2+| parameter | returns |description 
.2+|inject 
|String | Script to inject
.2+|+true+ if the script was injected, +false+ otherwise.
.2+|Injects a script into the +frame+, see also <<frameStatus>>
|Boolean | +true+ to inject the script in the global scope, +false+ to encapsulate it
in a function; *optional*, default +false+
|=============================================

.Signals
[options="header", cols="2s,2m,2m,4,4"]
|=============================================
|signal               |first parameter  2+|object properties  |description 
|frameStatus[[frameStatus]] | <<frame>>
|status |<<LoadStatus>>
| Emitted when the load status of a frame changes changes, scripts should be
injected into a frame either on +LoadStatus.committed+ or +LoadStatus.finished+

|=============================================

.Example
[source,javascript]
-------- 
signals.connect("frameStatus", function(frame, o) {
  if (o.status == LoadStatus.finished) {
    frame.inject("document.body.innerHTML = '';");
  }
});
--------


== Enum objects ==
Enum objects are objects that have only readonly properties, mapping
gtk/webkit enums to javascript objects. 

[[ButtonContext]]
.ButtonContext

[source,javascript]
--------
const ButtonContext = {
  document   : 1 << 1,
  link       : 1 << 2,
  image      : 1 << 3,
  media      : 1 << 4,
  selection  : 1 << 5,
  editable   : 1 << 6
};
--------

[[ClickType]]
.ClickType

[source,javascript]
--------
const ClickType = {
  click       : 4,
  doubleClick : 5,
  tripleClick : 6
};
--------

[[DownloadStatus]]
.DownloadStatus

[source,javascript]
-------
const DownloadStatus = {
  error       : -1,
  created     : 0,
  started     : 1, 
  cancelled   : 2,
  finished    : 3
};
-------

[[LoadStatus]]
.LoadStatus

[source,javascript]
---------
const LoadStatus = { 
  provisional       : 0, 
  committed         : 1,
  finished          : 2,
  firstVisualLayout : 3,
  failed            : 4
};
---------

[[Modifier]]
.Modifier

[source,javascript]
--------
const Modifier = {
  Shift     : 1 << 0,
  Lock	    : 1 << 1,
  Control   : 1 << 2,
  Mod1	    : 1 << 3,
  Mod2	    : 1 << 4,
  Mod3	    : 1 << 5,
  Mod4	    : 1 << 6,
  Mod5	    : 1 << 7,
  Button1   : 1 << 8,
  Button2   : 1 << 9,
  Button3   : 1 << 10,
  Button4   : 1 << 11,
  Button5   : 1 << 12,
  Super     : 1 << 26,
  Hyper     : 1 << 27,
  Meta      : 1 << 28,
  Release   : 1 << 30,
  Modifier  : 0x5c001fff
};
--------

[[NavigationReason]]
.NavigationReason

[source,javascript]
--------
const NavigationReason = {
  linkClicked     : 0,
  formSubmitted   : 1,
  backForward     : 2,
  reload          : 3,
  formResubmitted : 4,
  other           : 5
};
--------

[[SpawnError]]
.SpawnError
[source,javascript]
--------
const SpawnError = {
  success       : 0, 
  spawnFailed   : 1<<0, 
  stdoutFailed  : 1<<1, 
  stderrFailed  : 1<<2
};
--------

[[Encapsulation]]
== Encapsulation == 
Since all scripts share the same context, they have the same global scope, so it
must be taken care to encapsulate the data, all scripts are encapsulated in a
function but global variables may be visible in other scripts. 
Consider the following scenario:

.Script 1
[source,javascript]
-------
#!javascript

script1 = "Script 1";
io.print(script2);
-------

.Script 2
[source,javascript]
-------
#!javascript

script2 = "Script 2";
io.print(script1);
-------

Since both scripts share one execution context this will produce either 
-------
Script 2
-------
or 
-------
Script 1
-------
depending on which script is included first.

To avoid this always use +var+ for global variables. 

.Script 1
[source,javascript]
-------
#!javascript

var script1 = "Script 1";
io.print(script2);
-------

.Script 2
[source,javascript]
-------
#!javascript

var script2 = "Script 2";
io.print(script1);
-------
This will produce no output, as expected. The same holds for encapsulated scripts included
with <<include>>. 

// vim: set ft=asciidoc:

