= api documentation =

== Abstract == 

*dwb* can be extended with different types of userscripts. 
This api documentation describes the javascript interface. 

== Getting Started == 
Scripts that use the javascript api must be located in
+$XDG_CONFIG_HOME/dwb/userscripts+ like any other script. 
To include a userscript that uses this api the script must have the following
shebang
-------
#!javascript
-------

All scripts with this shebang will be executed in the same global context so it
must be taken care to encapsulate the data if more than one script is used (see
also <<Encapsulation>>). 


:numbered!:
:caption:
[[Functions]]
== Functions ==

=== Global functions ===
Functions from the global object.

[options="header", cols="1s,1m,2,2,4"]
|=============================================
|function               2+| parameter | returns |description 

|execute
|String
| dwb-command to execute; required                       | 
+true+ if successfull, +false+ otherwise  |
Executes a dwb-command in the focused tab.    

|include
|String| Path to a file to include; required        | 
+true+ if file was included, +false+ otherwise  |
Includes a file. Note that there is only one context, all scripts are
executed in this context. Included files are always included in the global
scope but encapsulated in a function. 

|plugin [red]#todo#
|String | Name of the plugin to load 
| - 
|Loads a system plugin

|=============================================

.Example
---------------------------------
execute("tabopen ixquick.com");
---------------------------------

[[io]]
=== io ===
The +io+ object implements functions for input and output. 

[options="header", cols="1s,1m,3,2,2"]
|=============================================
|function               2+| parameter | returns |description 
.2+|print
|String | Text to print; required
.2+| - 
.2+|Print text to stdout
|String | Pass +"stderr"+ to print to stderr; optional

.3+|write          | 
String| Path to a file to write to; required .3+|
+true+ if successfull, +false+ otherwise .3+|
Write text to a local file
|String|Either +"a"+ if the text should be appended or +"w"+ to create a new file; required
|String | Text that should be written to the file; required

| read
| String | A path to a file to read; required
| a string with the content of the file if reading was successfull, +null+
otherwise.|Get content of a local file

|=============================================

.Example
---------------------------------
var text = io.read("/home/foo/textfile.txt");
io.print(text);
--------------------------------

[[system]]
=== system ===

The +system+ object implements system functions.

[options="header", cols="1s,1m,2,2,2"]
|=============================================
|function               2+| parameter | returns |description 
|spawn 
|String | Command to execute; required
|+true+ if successfull, +false+ otherwise
|Executes a shell command using the default searchpath.

|getEnv 
|String | Name of the variable; required
|String containing the variable or +null+ if the variable was not found
|Get a system environment variable.
|=============================================

.Example
------------
var home = system.getEnv("HOME");
system.spawn("xterm -e vim " + home + "/.bashrc");
------------

[[webview]]
=== webview ===
The +webview+ object represents the widget that actually displays the site
content.
The +webview+ object will be the first parameter of every signal function. 

.Properties
[options="header", cols="2s,2m,1s,10"]
|=============================================
|name |type | mode| description
|uri |String |rw | The uri of the +webview+
|title |String|ro | The title of the +webview+
|=============================================

.Example
------------
if (wv.title == "Title") {
  wv.uri = "http://example.com";
}
------------

.Functions

[options="header", cols="1s,1m,2,2,4"]
|=============================================
|function               2+| parameter | returns |description 
|set 
|Object       |A object with properties to set; required
|+false+ if an error occurs, +true+ otherwise   
|Sets the webviews properties, valid properties are the properties of 
http://webkitgtk.org/reference/webkitgtk/stable/WebKitWebSettings.html[WebKitWebSettings].

|get 
|String       |The name of the property to get; required
|A String containing the property value
|Sets the webviews properties, valid properties are the properties of 
http://webkitgtk.org/reference/webkitgtk/stable/WebKitWebSettings.html[WebKitWebSettings].
Note that this function always returns a String, for boolean values it returns
+TRUE+ or +FALSE+.

|inject [red]#todo# 
|String | Script to inject
|-
|Injects a script into the +webview+

|history 
|Number       |Number of steps
|- 
|Loads the history item +steps+ away from the current item. 

|reload 
|-       |
|- 
|Reload the +webview+

|=============================================

.Example
------------
signals.navigation = function (o, obj) {
  if (/.*youtube.*/.test(obj.uri)) {
    o.set({
      "enable-plugins" : true, 
      "enable-scripts" : true
    });
  }
}
------------

[[tabs]]
=== tabs ===
A +tabs+ object implements functions and properties to get +webview+ objects. 

.Properties
[options="header", cols="2s,2m,1s,10"]
|=============================================
|name |type|mode| description
|current |<<webview>>| ro |The currently focused tab
|length |Number |ro| The total number of tabs
|number |Number |ro| The number of the currently focused tab

|=============================================

.Functions
[options="header", cols="1s,1m,3,2,2"]
|=============================================
|function               2+| parameter | returns |description 
|nth |Number |Number of the tab, counting from 0; required | A <<webview>> object or +null+ if
an error occured | Gets the webview object of the nth tab.

|=============================================

.Example 
----
var c = tabs.current;
tabs.nth(2).uri = c.uri;
----


== Signals ==
With the +signals+ object *dwb* communicates with the script on certain events. To connect to a signal
one can set callback-function as the signals property which will be called then.
However it is better to connect to signals using the connect function.
The callback function always has 2 parameters, the object which
received the signal and another object
which contains values relevant to the signal.

//
//
//.Example 
//--------
//signals.loadStatus = function(webview, object) {
//    if (object.status == 2 && /.*google.*/.test(object.uri)) {
//      webview.history(-1);
//    }
//}
//--------
//
//It is only possible to connect to a signal once. If more then one script is
//included it may be better to connect to a signal with a connect function, in
//order to connect to the signal muliple times: 
//------------
//signals.registered = new Object();
//signals.emit = function(sig, wv, o) {
//  var s = signals.registered[sig];
//  for (var i=0; i<s.length; i++) {
//    s[i](wv, o);
//  }
//}
//signals.connect = function(sig, func) 
//{
//  var connected = signals.registered[sig] != undefined && signals.registered[sig] != null;
//  if (!connected)
//    signals.registered[sig] = [];
//  signals.registered[sig].push(func);
//  if (!connected) {
//    signals[sig] = function (wv, o) {
//      signals.emit(sig, wv, o);
//    };
//  }
//}
//------------
//The above example would then be equivalent to
//------------
//signals.connect("loadStatus", function(o, obj) {
//    if (object.status == 2 && /.*google.*/.test(object.uri)) {
//      webview.history(-1);
//    }
//});
//------------

The signals object implements the following functions

.Functions
[options="header", cols="1s,1m,3,2,2"]
|=============================================
|function               2+| parameter | returns | description 

.2+|connect 
|String |The signal name to connect to; required .2+| The
signal id of the signal.
.2+| Connects to a signal.

|Function | The callback to call when the signal is emitted; required

|disconnect 
|Number |The signal id of the signal; required | - 
| Disconnects from a signal, the id is the id returned by 
+connect+.


.3+|emit 
|String |The signal name to emit; required .3+| - 
.3+| Emits a signal. 

|Object |Object passed to the callback function; optional
|Object |Object passed to the callback function; optional

|=============================================

The signals implemented by *dwb* are 

[options="header", cols="1s,1m,2,3"]
|=============================================
|signal                 2+|object properties  |description 

.5+|download 
|filename|The suggested filename 
.5+|Emitted before a download starts. Return +true+ to handle the signal or +false+ to let *dwb* handle the signal.
|mimeType|The mimetype of the file or +unknown+
|referer|The referer of the request
|uri|The uri of the file to download
|totalsize|The total size of the file

.2+|loadStatus
|status|The loadstatus where +status+ is one of
http://webkitgtk.org/reference/webkitgtk/stable/WebKitWebNavigationAction.html[WebKitLoadStatus]
.2+|Emitted when the load status changes.
|uri|Uri that is currently loaded

.2+|mimeType 
|mimeType| The mime-type
.2+|Decide whether or not to show a given mimetype. Return true to stop the request.
|uri| Uri of the request

.2+|navigation          
|uri | Uri of the request 
.2+| Emitted before a new site is loaded, return *true* to stop the request.
|reason | Reason for the request where +reason+ is a
http://webkitgtk.org/reference/webkitgtk/stable/WebKitWebNavigationAction.html#WebKitWebNavigationReason[WebKitWebNavigationReason]
|=============================================

.Example 
------
function loadStatusCallback(wv, values) {
  if (/.*google.com.*/.test(values.uri && obj.status == 2) {
    wv.loadUri("http://www.ixquick.com");
    signals.disconnect("loadStatus", loadStatusCallback);
  }
}
signals.connect("loadStatus", loadStatusCallback);
------

[[Encapsulation]]
== Encapsulation == 
Since all scripts share the same context, they have the same global scope, so it
must be taken care to encapsulate the data, all scripts are encapsulated in a
function but global variables may be visible in other scripts. 
Consider the following scenario:

.Script 1
-------
#!javascript

script1 = "Script 1";
io.print(script2);
-------

.Script 2
-------
#!javascript

script2 = "Script 2";
io.print(script1);
-------

Since both scripts share one execution context this will produce either 
-------
Script 2
-------
or 
-------
Script 1
-------
depending on which script is included first.

To avoid this always use +var+ for global variables. 

.Script 1
-------
#!javascript

var script1 = "Script 1";
io.print(script2);
-------

.Script 2
-------
#!javascript

var script2 = "Script 2";
io.print(script1);
-------
This will produce no output, as expected. The same holds for scripts included
with *include*.

